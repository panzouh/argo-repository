{{- define "argocd.enabled" -}}
{{- or .Values.argocd.enabled .Values.default.enabled -}}
{{- end -}}
{{ if eq (include "argocd.enabled" .) "true" }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argoception
  namespace: {{ .Values.argocd.namespace }}
  finalizers:
  {{- include "argocd.applications.finalizers" . | nindent 4 }}
spec:
  {{- template "cluster.syncPolicy" . }}
  destination:
    namespace: {{ .Values.argocd.namespace }}
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: {{ .Values.argocd.chart.name }}
    repoURL: {{ .Values.argocd.chart.repo }}
    targetRevision: {{ .Values.argocd.chart.version }}
    helm:
      version: v3
      values: |-
        installCRDs: false
        {{- if .Values.argocd.chart.values.ha }}
        redis-ha:
          enabled: true
        {{- end }}
        server:
          {{- if .Values.argocd.chart.values.ha }}
          replicas: 2
          {{- end }}
          {{- if .Values.proxies.enabled }}
          env:
            - name: http_proxy
              value: {{ .Values.proxies.value }}
            - name: https_proxy
              value: {{ .Values.proxies.value }}
            - name: no_proxy
              value: {{ .Values.proxies.noProxy }}
            {{- if .Values.argocd.chart.values.ha }}
            - name: ARGOCD_API_SERVER_REPLICAS
              value: '2'
            {{- end }}
          {{- else if .Values.argocd.chart.values.ha }}
          - name: ARGOCD_API_SERVER_REPLICAS
              value: '2'
          {{- end }}
          {{- if and (eq (include "ingress.namespace" .) "traefik-system") .Values.argocd.chart.values.ingress.enabled }}
            {{- include "traefik-ingress.helm" (dict "name" .Values.argocd.chart.values.ingress.name "traefik" .Values.ingress.traefik.chart.values) | nindent 10 -}}
          {{- end }}
          config:
            {{- if and (eq (include "ingress.namespace" .) "traefik-system") .Values.argocd.chart.values.ingress.enabled }}
            url: {{- include "url-constructor" (dict "name" .Values.argocd.chart.values.ingress.name "ingress" .Values.ingress.traefik.chart.values) }}
            {{- else if and (eq (include "ingress.namespace" .) "ingress-nginx") .Values.argocd.chart.values.ingress.enabled }}
            url: {{- include "url-constructor" (dict "name" .Values.argocd.chart.values.ingress.name "ingress" .Values.nginx.traefik.chart.values) }}
            {{- end }}
            application.instanceLabelKey: argocd.argoproj.io/instance
            {{- if .Values.argocd.chart.values.repositories -}}
            repositories:
              {{- range .Values.argocd.chart.values.repositories }}
              {{- end }}
            {{- end }}
            {{- if .Values.argocd.chart.values.avp.enabled }}
            configManagementPlugins: |-
            - name: argocd-vault-plugin
              generate:
                command: ["argocd-vault-plugin"]
                args: ["generate", "./"]
            {{- end }}
          extraArgs:
          {{- if or .Values.argocd.chart.values.insecure (and .Values.argocd.chart.values.ingress.enabled (or (and .Values.ingress.traefik.enabled .Values.ingress.traefik.chart.values.ssl.enabled) (and .Values.ingress.nginx.enabled .Values.ingress.nginx.chart.values.ssl.enabled))) }}
            - --insecure
          {{- end }}
        {{- if .Values.proxies.enabled }}
        repoServer:
          env:
            - name: http_proxy
              value: {{ .Values.proxies.value }}
            - name: https_proxy
              value: {{ .Values.proxies.value }}
            - name: no_proxy
              value: {{ .Values.proxies.noProxy }}
          {{- if .Values.argocd.chart.values.ha }}
            - name: ARGOCD_EXEC_TIMEOUT
              value: "300s"
          replicas: 2
          {{- end }}
          {{- if .Values.argocd.chart.values.avp.enabled }}
          serviceAccount:
            create: false
            name: "avp"
            annotations: {}
            automountServiceAccountToken: true
          initContainers:
          - name: download-tools
            image: cirrusci/wget:latest
            command: [sh, -c]
            env:
              - name: AVP_VERSION
                value: {{ quote .Values.argocd.chart.values.avp.version }}
            args:
              - wget -O argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 && chmod 0755 argocd-vault-plugin && mv argocd-vault-plugin /custom-tools/
            volumeMounts:
              - mountPath: /custom-tools
              - name: custom-tools
          volumeMounts:
            - mountPath: /usr/local/bin/argocd-vault-plugin
              name: custom-tools
              subPath: argocd-vault-plugin
          volumes:
            - name: custom-tools
              emptyDir: {}
          {{- end }}
        {{- else if .Values.argocd.chart.values.ha }}
        repoServer:
          replicas: 2
          env:
            - name: ARGOCD_EXEC_TIMEOUT
              value: "300s"
          {{- if .Values.argocd.chart.values.avp.enabled }}
          serviceAccount:
            create: false
            name: "avp"
            annotations: {}
            automountServiceAccountToken: true
          initContainers:
          - name: download-tools
            image: cirrusci/wget:latest
            command: [sh, -c]
            env:
              - name: AVP_VERSION
                value: {{ quote .Values.argocd.chart.values.avp.version }}
            args:
              - wget -O argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 && chmod 0755 argocd-vault-plugin && mv argocd-vault-plugin /custom-tools/
            volumeMounts:
              - mountPath: /custom-tools
              - name: custom-tools
          volumeMounts:
            - mountPath: /usr/local/bin/argocd-vault-plugin
              name: custom-tools
              subPath: argocd-vault-plugin
          volumes:
            - name: custom-tools
              emptyDir: {}
          {{- end }}
        {{- else if .Values.argocd.chart.values.avp.enabled }}
        repoServer:
          serviceAccount:
            create: false
            name: "avp"
            annotations: {}
            automountServiceAccountToken: true
          initContainers:
          - name: download-tools
            image: cirrusci/wget:latest
            command: [sh, -c]
            env:
              - name: AVP_VERSION
                value: {{ quote .Values.argocd.chart.values.avp.version }}
            args:
              - wget -O argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 && chmod 0755 argocd-vault-plugin && mv argocd-vault-plugin /custom-tools/
            volumeMounts:
              - mountPath: /custom-tools
              - name: custom-tools
          volumeMounts:
            - mountPath: /usr/local/bin/argocd-vault-plugin
              name: custom-tools
              subPath: argocd-vault-plugin
          volumes:
            - name: custom-tools
              emptyDir: {}
        {{- end }}
{{ end }}
