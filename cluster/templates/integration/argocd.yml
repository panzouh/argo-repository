{{- define "argocd.enabled" -}}
{{- or .Values.argocd.enabled .Values.default.enabled -}}
{{- end -}}
{{ if eq (include "argocd.enabled" .) "true" }}
{{- if .Values.argocd.values.avp.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.argocd.values.avp.saName }}
  namespace: {{ .Values.argocd.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-reader
  namespace: {{ .Values.argocd.namespace }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: allow-secret-read-avp
  namespace: {{ .Values.argocd.namespace }}
subjects:
- kind: ServiceAccount
  name: avp
roleRef:
  kind: Role
  name: secrets-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: avp-env
  namespace: {{ .Values.argocd.namespace }}
  labels:
    app.kubernetes.io/part-of: argocd
data:
  AVP_K8S_ROLE: {{ .Values.argocd.values.avp.saName | b64enc }}
  AVP_TYPE: {{ print "vault" | b64enc }}
  {{- if .Values.vault.enabled }}
  VAULT_ADDR: {{ printf "http://vault.%v:8200" .Values.vault.namespace | b64enc }}
  {{- else }}
  VAULT_ADDR: {{ .Values.argocd.values.avp.auth.vaultUrl | b64enc }}
  {{- end }}
  AVP_AUTH_TYPE: {{ .Values.argocd.values.avp.auth.type | b64enc }}
  AVP_K8S_MOUNT_PATH: {{ .Values.argocd.values.avp.auth.path | b64enc }}
type: Opaque
{{- end }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: {{ .Values.argocd.namespace }}
  finalizers:
  {{- include "argocd.applications.finalizers" . | nindent 4 }}
spec:
  {{- template "cluster.syncPolicy.default" . }}
  destination:
    namespace: {{ .Values.argocd.namespace }}
    server: https://kubernetes.default.svc
  project: integration
  source:
    chart: {{ .Values.argocd.chart.name }}
    repoURL: {{ .Values.argocd.chart.repo }}
    targetRevision: {{ .Values.argocd.chart.version }}
    helm:
      version: v3
      values: |-
        controller:
          enableStatefulSet: true
          {{- if and .Values.argocd.values.monitor .Values.monitoring.prometheus.enabled }}
          metrics:
            enabled: true
            service:
              annotations:
                prometheus.io/scrape: 'true'
                prometheus.io/port: '8082'
                prometheus.io/path: '/metrics'
              servicePort: 8082
          {{- end }}
        applicationset:
          enabled: false
        dex:
          enabled: true
        {{- if .Values.argocd.values.ha }}
        redis-ha:
          enabled: true
          securityContext: {}
          haproxy:
            securityContext: {}
        {{- end }}
        configs:
          createSecret: false
        server:
          {{- if .Values.argocd.values.ha }}
          replicas: 2
          {{- end }}
          {{- if and .Values.argocd.values.monitor .Values.monitoring.prometheus.enabled }}
          metrics:
            enabled: true
            service:
              annotations:
                prometheus.io/scrape: 'true'
                prometheus.io/port: '8083'
                prometheus.io/path: '/metrics'
              servicePort: 8083
          {{- end }}
          {{- if and (eq (include "ingress.namespace" .) "traefik-system") .Values.argocd.values.ingress.enabled }}
            {{- include "helm-ingress.defaultSpec" (dict "name" .Values.argocd.values.ingress.name "ingressDefinition" .Values.ingress.ingressDefinition "annotations" .Values.ingress.traefik.values.ingressAnnotations) | nindent 10 }}
          extraArgs:
            - --insecure
          {{- end }}
          {{- if and (eq (include "ingress.namespace" .) "ingress-nginx") .Values.argocd.values.ingress.enabled }}
            {{- include "helm-ingress.defaultSpec" (dict "name" .Values.argocd.values.ingress.name "ingressDefinition" .Values.ingress.ingressDefinition "annotations" .Values.ingress.nginx.values.ingressAnnotations) | nindent 10 }}
          extraArgs:
            - --insecure
          {{- end }}
          logLevel: {{ .Values.argocd.values.logLevel }}
          {{- if or .Values.argocd.values.ha .Values.proxies.enabled }}
          env:
            {{- if .Values.argocd.values.ha }}
            - name: ARGOCD_API_SERVER_REPLICAS
              value: '2'
            {{- end }}
            {{- if .Values.proxies.enabled }}
            - name: http_proxy
              value: {{ quote .Values.proxies.value }}
            - name: https_proxy
              value: {{ quote .Values.proxies.value }}
            - name: no_proxy
              value: argocd-repo-server,argocd-application-controller,argocd-metrics,argocd-server,argocd-server-metrics,argocd-redis,argocd-dex-server,{{ .Values.proxies.noProxy }}
            {{- end }}
          {{- end }}
          config:
            {{- if .Values.argocd.values.ingress.enabled }}
            url: {{ include "url-constructor" (dict "name" .Values.argocd.values.ingress.name "ingress" .Values.ingress.ingressDefinition) }}
            {{- end }}
            application.instanceLabelKey: argocd.argoproj.io/instance
            {{- if .Values.argocd.values.avp.enabled }}
            configManagementPlugins: |-
              - name: argocd-helm-vault-plugin
                generate:
                  command: ["bash", "-c"]
                  args: ['helm template "$ARGOCD_APP_NAME" -f <(echo "$HELM_VALUES") . | argocd-vault-plugin -s avp-env generate -']
            {{- end }}
            repositories: |
              - url: https://github.com/panzouh/argo-repository.git
              {{- if .Values.argocd.values.repositories }}
                {{- toYaml .Values.argocd.values.repositories | nindent 14 }}
              {{- end }}
        repoServer:
          {{- if .Values.argocd.values.ha }}
          replicas: 2
          {{- end }}
          {{- if and .Values.argocd.values.monitor .Values.monitoring.prometheus.enabled }}
          metrics:
            enabled: true
            service:
              annotations:
                prometheus.io/scrape: 'true'
                prometheus.io/port: '8084'
                prometheus.io/path: '/metrics'
              servicePort: 8084
          {{- end }}
          {{- if .Values.argocd.values.avp.enabled }}
          serviceAccount:
            create: false
            name: avp
            automountServiceAccountToken: true
          volumeMounts:
            - mountPath: /usr/local/bin/argocd-vault-plugin
              name: custom-tools
              subPath: argocd-vault-plugin
            - mountPath: /etc/avp-config.yaml
              name: avp-config
              subPath: avp-config.yaml
          volumes:
            - name: custom-tools
              emptyDir: {}
            - name: avp-config
              configMap:
                name: avp-cm
          initContainers:
          - name: download-tools
            image: cirrusci/wget:latest
            command: [sh, -c]
            env:
              - name: AVP_VERSION
                value: {{ quote .Values.argocd.values.avp.version }}
              {{- if .Values.proxies.enabled }}
              - name: http_proxy
                value: {{ quote .Values.proxies.value }}
              - name: https_proxy
                value: {{ quote .Values.proxies.value }}
              {{- end }}
            args:
              - wget -O /custom-tools/argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 && chmod 0755 /custom-tools/argocd-vault-plugin
            volumeMounts:
              - mountPath: /custom-tools
                name: custom-tools
          env:
            - name: ARGOCD_EXEC_TIMEOUT
              value: "300s"
            {{- if .Values.proxies.enabled }}
            - name: http_proxy
              value: {{ quote .Values.proxies.value }}
            - name: https_proxy
              value: {{ quote .Values.proxies.value }}
            - name: no_proxy
              value: argocd-repo-server,argocd-application-controller,argocd-metrics,argocd-server,argocd-server-metrics,argocd-redis,argocd-dex-server,{{ .Values.proxies.noProxy }}
            {{- end }}
          {{- end }}
{{ end }}
