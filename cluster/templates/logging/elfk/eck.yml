{{ if eq (include "logging.namespace" .) "elastic-system" }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eck
  namespace: {{ .Values.argocd.namespace }}
  finalizers:
  {{- include "argocd.applications.finalizers" . | nindent 4 }}
spec:
  {{- template "cluster.syncPolicy.default" . }}
  destination:
    namespace: {{ (include "logging.namespace" .) }}
    server: https://kubernetes.default.svc
  project: logging
  ignoreDifferences:
    - group: admissionregistration.k8s.io
      kind: ValidatingWebhookConfiguration
      name: elastic-operator.elastic-system.k8s.elastic.co
      jqPathExpressions:
        - .webhooks[].namespaceSelector.matchExpressions[] | select(.key == "control-plane")
  source:
    chart: {{ .Values.logging.eck.chart.name }}
    repoURL: {{ .Values.logging.eck.chart.repo }}
    targetRevision: {{ .Values.logging.eck.chart.version }}
    helm:
      version: v3
      values: |-
        {{- if .Values.logging.eck.values.watchNamespaces }}
        managedNamespaces:
          {{- range .Values.logging.eck.values.watchNamespaces }}
          - {{ . }}
          {{- end }}
        {{- end }}
        installCRDs: false
        replicaCount: 1
        image:
          pullPolicy: Always
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 150Mi
        podSecurityContext:
          runAsNonRoot: true
        createClusterScopedResources: true
        tracing:
          enabled: false
        refs:
          enforceRBAC: false
        telemetry:
          {{- if .Values.logging.eck.values.telemetryEnabled }}
          disabled: false
          {{- else }}
          disabled: true
          {{- end }}
          distributionChannel: "helm"
        config:
          logVerbosity: {{ quote (include "eck.verbosity" .) }}
        {{- if and .Values.monitoring.prometheus.enabled .Values.logging.eck.values.monitor }}
          metricsPort: "8500"
        podMonitor:
          enabled: false
          annotations:
            prometheus.io/scrape: 'true'
            prometheus.io/port: '8500'
          namespace: {{ .Values.monitoring.namespace }}
          interval: 5m
          scrapeTimeout: 30s
        {{- end }}
        global:
          kubeVersion: {{ .Capabilities.KubeVersion }}
{{ end }}
